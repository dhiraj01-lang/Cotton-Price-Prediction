# -*- coding: utf-8 -*-
"""cotton_final_price_1_year.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Am_R6yrq8JJz74s7m7um0faqdOywkArn

# COTTON PRICE PREDICTION OF MAHARASHTRA(1 yr mah_1yr)
"""

pip install pmdarima

# Commented out IPython magic to ensure Python compatibility.
#IMPORTING ALL REQUIRED PACKAGES
# %matplotlib inline
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from matplotlib.pylab import rcParams
import seaborn as sns
import statsmodels.api as sm
import warnings
warnings.filterwarnings('ignore')
plt.style.use('fivethirtyeight')
from pylab import rcParams
rcParams['figure.figsize'] = 10, 6
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA
from pmdarima.arima import auto_arima
from sklearn.metrics import mean_squared_error, mean_absolute_error
import math
import matplotlib.ticker as ticker

mah_1yr=pd.read_csv('maharashtra_1yr.csv')
mah_1yr

"""# EXPLORATORY ic_1yr ANALYSIS(EDA)"""

#CHECKING SHAPE OF ic_1yrSET
mah_1yr.shape

#CHECKING NULL VALUES IN ic_1yrSET
mah_1yr.isnull().sum()

#SINCE THE mah_1yrSET HAD NULL VALUES, WE REMOVE IT USING DROPNA() 
mah_1yr=mah_1yr.dropna()
mah_1yr

mah_1yr.isnull().sum()

#DESCIPTION OF mah_1yrSET
mah_1yr.describe()

#INFORMATION ABOUT mah_1yrSET
mah_1yr.info()

mah_1yr2 = mah_1yr.groupby('DATE')[['VALUES']].mean()

mah_1yr2

type(mah_1yr.DATE[0])

"""# VISUALIZATION OF ic_1yrSET"""

#plotting the graph with date againts closing price(in month)
mah_1yr.plot(figsize=(12,8),x='DATE',y='VALUES',title='Closing Price(in Year)',fontsize=14)
plt.xlabel("Month")
plt.ylabel("Price")

mah_1yr2

fig = plt.figure(figsize=(12,8))
ax1 = fig.add_subplot(211)
fig = sm.graphics.tsa.plot_acf(mah_1yr2['VALUES'].iloc[13:],lags=40,ax=ax1)
ax2 = fig.add_subplot(212)
fig = sm.graphics.tsa.plot_pacf(mah_1yr2['VALUES'].iloc[13:],lags=40,ax=ax2)

"""# DICKEY FULLER TEST(For checking stationarity)"""

test_result=adfuller(mah_1yr2['VALUES'])
#Ho: It is non stationary
#H1: It is stationary

def adfuller_test(sales):
    result=adfuller(sales)
    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']
    for value,label in zip(result,labels):
        print(label+' : '+str(value) )
    if result[1] <= 0.05:
        print("strong evidence against the null hypothesis(Ho), reject the null hypothesis. ic_1yr has no unit root and is stationary")
    else:
        print("weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary ")

mah_1yr2['VALUES First Difference'] = mah_1yr2['VALUES'] - mah_1yr2['VALUES'].shift(1)
mah_1yr2['VALUES'].shift(periods=1)

adfuller_test(mah_1yr2['VALUES First Difference'].dropna())
mah_1yr2['VALUES First Difference'].plot(figsize=(12,8))
plt.xlabel("Year")
plt.ylabel("Price")

stepwise_fit = auto_arima(mah_1yr2['VALUES'], trace=True,suppress_warnings=True)

train_mah_1yr, test_mah_1yr = mah_1yr2[0:int(len(mah_1yr2)*0.7)], mah_1yr2[int(len(mah_1yr2)*0.7):]
training_mah_1yr = train_mah_1yr['VALUES'].values
test_mah_1yr = test_mah_1yr['VALUES'].values
history = [x for x in training_mah_1yr]
model_predictions = []
N_test_observations = len(test_mah_1yr)
for time_point in range(N_test_observations):
    model = ARIMA(history, order=(5,0,1))
    model_fit = model.fit()
    output = model_fit.forecast()
    yhat = output[0]
    model_predictions.append(yhat)
    true_test_value = test_mah_1yr[time_point]
    history.append(true_test_value)
MSE_error = mean_squared_error(test_mah_1yr, model_predictions)
print('Testing Mean Squared Error is {}'.format(MSE_error))

test_set_range = mah_1yr2[int(len(mah_1yr2)*0.7):].index
ax = plt.axes()
ax.xaxis.set_major_locator(ticker.MultipleLocator(2))
plt.plot(test_set_range, model_predictions, color='blue', marker='o', linestyle='dashed',label='Predicted Price')
plt.plot(test_set_range, test_mah_1yr, color='red', label='Actual Price')
plt.title('COTTON PRICES PREDICTION')
plt.xlabel('Date')
plt.ylabel('Prices')
plt.xticks(rotation=90)
plt.tick_params(axis='x' ,labelsize=8)
# plt.xticks(np.arange(881,1259,50), ic_1yr2.Date[881:1259:50])
plt.legend()
plt.tight_layout()
plt.show()

pred=model_fit.predict(start=len(mah_1yr2),end=len(mah_1yr2)+30,typ='levels')
print(pred)

# model performance
mse = mean_squared_error(test_mah_1yr, model_predictions)
print('MSE: '+str(mse))
mae = mean_absolute_error(test_mah_1yr,model_predictions)
print('MAE: '+str(mae))
rmse = math.sqrt(mean_squared_error(test_mah_1yr, model_predictions))
print('RMSE: '+str(rmse))
mape = np.mean(np.abs(model_predictions - test_mah_1yr)/np.abs(test_mah_1yr))
print('MAPE: '+str(mape))
